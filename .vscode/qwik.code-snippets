{
  "Qwik component (simple)": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "com",
    "description": "Simple Qwik component",
    "body": [
      "import { component$ } from '@builder.io/qwik';\n",
      "export const ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}} = component$(() => {",
      "  return (",
      "    <>",
      "      $0",
      "    </>",
			"  )",
      "})",
    ],
  },
  "Qwik component (props)": {
    "scope": "typescriptreact",
    "prefix": "comp",
    "description": "Qwik component w/ props",
    "body": [
      "import { component$ } from '@builder.io/qwik';\n",
      "export type ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Props {}\n",
      "export default component$<$1Props>(() => {",
      "  return (",
      "    <>",
      "      $0",
      "    </>",
      "  )",
      "})",
    ],
  },
  "Qwik signal": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "useSignal",
    "description": "useSignal() declaration",
    "body": ["const ${1:foo} = useSignal($2);", "$0"],
  },
  "Qwik store": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "useStore",
    "description": "useStore() declaration",
    "body": ["const ${1:state} = useStore({", "  $2", "});", "$0"],
  },
  "$ hook": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "$",
    "description": "$() function hook",
    "body": ["$(() => {", "  $0", "});", ""],
  },
  "useVisibleTask": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "useVisibleTask",
    "description": "useVisibleTask$() function hook",
    "body": ["useVisibleTask$(({ track }) => {", "  $0", "});", ""],
  },
  "useTask": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "useTask$",
    "description": "useTask$() function hook",
    "body": [
      "useTask$(({ track }) => {",
      "  track(() => $1);",
      "  $0",
      "});",
      "",
    ],
  },
  "useResource": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "useResource$",
    "description": "useResource$() declaration",
    "body": [
      "const $1 = useResource$(({ track, cleanup }) => {",
      "  $0",
      "});",
      "",
    ],
  },
}
